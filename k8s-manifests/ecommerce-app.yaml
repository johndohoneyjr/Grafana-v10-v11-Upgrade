# Sample E-commerce Application for Monitoring Testing
# This application includes multiple microservices to generate diverse metrics

apiVersion: v1
kind: Namespace
metadata:
  name: ecommerce
  labels:
    monitoring: enabled
---
# Frontend Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: ecommerce
  labels:
    app: frontend
    tier: web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: web
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      containers:
      - name: frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
        - containerPort: 8080
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        env:
        - name: BACKEND_URL
          value: "http://backend-service:8080"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: ecommerce
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
  - name: metrics
    protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
# Backend API Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: ecommerce
  labels:
    app: backend
    tier: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        tier: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9090"
    spec:
      containers:
      - name: backend
        image: httpd:alpine
        ports:
        - containerPort: 80
        - containerPort: 9090
        resources:
          requests:
            memory: "256Mi"
            cpu: "150m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        env:
        - name: DATABASE_URL
          value: "postgres://database-service:5432/ecommerce"
        - name: REDIS_URL
          value: "redis://cache-service:6379"
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: ecommerce
  labels:
    app: backend
spec:
  selector:
    app: backend
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 80
  - name: metrics
    protocol: TCP
    port: 9090
    targetPort: 9090
  type: ClusterIP
---
# Database Service (PostgreSQL simulation)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  namespace: ecommerce
  labels:
    app: database
    tier: data
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
        tier: data
    spec:
      containers:
      - name: database
        image: postgres:13-alpine
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        env:
        - name: POSTGRES_DB
          value: "ecommerce"
        - name: POSTGRES_USER
          value: "dbuser"
        - name: POSTGRES_PASSWORD
          value: "dbpass123"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - dbuser
            - -d
            - ecommerce
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - dbuser
            - -d
            - ecommerce
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: postgres-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: database-service
  namespace: ecommerce
  labels:
    app: database
spec:
  selector:
    app: database
  ports:
  - name: postgres
    protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP
---
# Cache Service (Redis simulation)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cache
  namespace: ecommerce
  labels:
    app: cache
    tier: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cache
  template:
    metadata:
      labels:
        app: cache
        tier: cache
    spec:
      containers:
      - name: cache
        image: redis:6-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: cache-service
  namespace: ecommerce
  labels:
    app: cache
spec:
  selector:
    app: cache
  ports:
  - name: redis
    protocol: TCP
    port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Message Queue Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: message-queue
  namespace: ecommerce
  labels:
    app: message-queue
    tier: messaging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: message-queue
  template:
    metadata:
      labels:
        app: message-queue
        tier: messaging
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management-alpine
        ports:
        - containerPort: 5672
        - containerPort: 15672
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "admin"
        - name: RABBITMQ_DEFAULT_PASS
          value: "admin123"
        livenessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - status
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - ping
          initialDelaySeconds: 10
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: message-queue-service
  namespace: ecommerce
  labels:
    app: message-queue
spec:
  selector:
    app: message-queue
  ports:
  - name: amqp
    protocol: TCP
    port: 5672
    targetPort: 5672
  - name: management
    protocol: TCP
    port: 15672
    targetPort: 15672
  type: ClusterIP
---
# Worker Service for Background Processing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  namespace: ecommerce
  labels:
    app: worker
    tier: worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
        tier: worker
    spec:
      containers:
      - name: worker
        image: busybox
        command: ["sh", "-c"]
        args:
        - |
          while true; do
            echo "Processing job at $(date)"
            # Simulate variable CPU usage
            dd if=/dev/zero of=/dev/null bs=1024 count=1000
            sleep 30
          done
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "150m"
---
# Load Generator for Testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-generator
  namespace: ecommerce
  labels:
    app: load-generator
    tier: testing
spec:
  replicas: 1
  selector:
    matchLabels:
      app: load-generator
  template:
    metadata:
      labels:
        app: load-generator
        tier: testing
    spec:
      containers:
      - name: load-generator
        image: busybox
        command: ["sh", "-c"]
        args:
        - |
          echo "Starting load generator..."
          while true; do
            # Generate HTTP requests to frontend
            wget -q -O- http://frontend-service.ecommerce.svc.cluster.local/ || true
            wget -q -O- http://backend-service.ecommerce.svc.cluster.local:8080/ || true
            
            # Random delay between requests
            sleep $((RANDOM % 10 + 1))
          done
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
